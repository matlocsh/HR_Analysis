# -*- coding: utf-8 -*-
"""employee_analysis.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UakUTmI79dHky1VXhHh3M4XmQSDQu3Po
"""

import pandas as pd
from datetime import datetime

def load_data(file_path):
    try:
        df = pd.read_csv(file_path)
        return df
    except Exception as e:
        print(f"An error occurred while loading the file: {e}")
        return None


def clean_data(df):
    # Handle missing values
    df = df.dropna(how='all')  # Drop rows where all elements are missing
    df = df.fillna(method='ffill').fillna(method='bfill')  # Fill missing values by forward fill and then backward fill

    # Ensure appropriate data types for specific columns
    df['EmployeeID'] = pd.to_numeric(df['EmployeeID'], errors='coerce')
    df['DateofHire'] = pd.to_datetime(df['DateofHire'], errors='coerce')
    df['Salary'] = pd.to_numeric(df['Salary'], errors='coerce')

    # Convert Status to categorical and add 'Unknown' category
    df['Status'] = df['Status'].astype('category')
    if 'Unknown' not in df['Status'].cat.categories:
        df['Status'] = df['Status'].cat.add_categories(['Unknown'])

    # Fill any remaining missing values
    df = df.fillna({
        'EmployeeID': 0,
        'FirstName': 'Unknown',
        'LastName': 'Unknown',
        'Department': 'Unknown',
        'DateofHire': pd.Timestamp('1900-01-01'),
        'Salary': 0,
        'Status': 'Unknown'
    })

    return df

def calculate_average_salary(df, department):
    # Filter the DataFrame for the specified department
    department_df = df[df['Department'] == department]

    # Check if the department exists
    if department_df.empty:
        print(f"No employees found in department: {department}")
        return None

    # Check if the Salary column is numeric
    if not pd.api.types.is_numeric_dtype(department_df['Salary']):
        print("The 'Salary' column contains non-numeric values.")
        return None

    # Calculate the average salary
    average_salary = department_df['Salary'].mean()

    return average_salary

def find_employees_with_experience(df, years):
    # Calculate the date that is 'years' years ago from today
    today = datetime.today()
    experience_date = today.replace(year=today.year - years)

    # Filter the DataFrame to include only employees with the required experience
    experienced_employees = df[pd.to_datetime(df['DateofHire']) <= experience_date]

    return experienced_employees

def get_department_statistics(df):
    # Initialize the dictionary to store the results
    department_stats = {}

    # Ensure the 'DateofHire' column is in datetime format
    df['DateofHire'] = pd.to_datetime(df['DateofHire'])

    # Iterate over each department
    for department in df['Department'].unique():
        dept_df = df[df['Department'] == department]

        # Calculate the average salary for the department
        avg_salary = dept_df['Salary'].mean()

        # Calculate the average number of years since the date of hire for the department
        today = datetime.today()
        avg_years_since_hire = dept_df['DateofHire'].apply(lambda x: today.year - x.year).mean()

        # Add the statistics to the dictionary
        department_stats[department] = {
            'Average Salary': avg_salary,
            'Average Age': avg_years_since_hire
        }

    return department_stats