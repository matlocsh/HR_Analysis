# -*- coding: utf-8 -*-
"""Project1_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XaBH0AE-IWn9WJ_z5t9tqXlldrofG3Fd

# **PROJECT 1: HR**

Task 1: Data Loading and Cleaning
"""

#load_data

import pandas as pd

def load_data(file_path):
    try:
        df = pd.read_csv(file_path)
        return df
    except Exception as e:
        print(f"An error occurred while loading the file: {e}")
        return None

#clean_data

def clean_data(df):
    # Handle missing values
    df = df.dropna(how='all')  # Drop rows where all elements are missing
    df = df.fillna(method='ffill').fillna(method='bfill')  # Fill missing values by forward fill and then backward fill

    # Ensure appropriate data types for specific columns
    df['EmployeeID'] = pd.to_numeric(df['EmployeeID'], errors='coerce')
    df['DateofHire'] = pd.to_datetime(df['DateofHire'], errors='coerce')
    df['Salary'] = pd.to_numeric(df['Salary'], errors='coerce')

    # Convert Status to categorical and add 'Unknown' category
    df['Status'] = df['Status'].astype('category')
    if 'Unknown' not in df['Status'].cat.categories:
        df['Status'] = df['Status'].cat.add_categories(['Unknown'])

    # Fill any remaining missing values
    df = df.fillna({
        'EmployeeID': 0,
        'First Name': 'Unknown',
        'Last Name': 'Unknown',
        'Department': 'Unknown',
        'DateofHire': pd.Timestamp('1900-01-01'),
        'Salary': 0,
        'Status': 'Unknown'
    })

    return df

"""Task 2: Decision Making and Loops"""

#calculate_average_salary

def calculate_average_salary(df, department):
    # Filter the DataFrame for the specified department
    department_df = df[df['Department'] == department]

    # Check if the department exists
    if department_df.empty:
        print(f"No employees found in department: {department}")
        return None

    # Check if the Salary column is numeric
    if not pd.api.types.is_numeric_dtype(department_df['Salary']):
        print("The 'Salary' column contains non-numeric values.")
        return None

    # Calculate the average salary
    average_salary = department_df['Salary'].mean()

    return average_salary

# Main code to load data, clean data, and calculate average salary for a specified department
file_path = '/content/drive/MyDrive/Python/employees1.csv'  # Replace with your file path
df = load_data(file_path)
print(df.columns)

if df is not None:
    df = clean_data(df)
    department = input("Enter the department name: ")
    average_salary = calculate_average_salary(df, department)
    if average_salary is not None:
        print(f"The average salary for the {department} department is: {average_salary:.2f}")

#find_employees_with_experience

import pandas as pd
from datetime import datetime

def clean_data(df):
    # Your cleaning logic here
    return df

def find_employees_with_experience(df, years):

    # Calculate the date that is 'years' years ago from today
    today = datetime.today()
    experience_date = today.replace(year=today.year - years)

    # Filter the DataFrame to include only employees with the required experience
    experienced_employees = df[pd.to_datetime(df['DateofHire']) <= experience_date]

    return experienced_employees

# Assuming 'df' is your DataFrame loaded from a CSV or other source
# df = pd.read_csv('your_file.csv') # Example of loading a DataFrame

if __name__ == "__main__":
    df = clean_data(df)
    years = int(input("Enter the number of years of experience: "))
    experienced_employees = find_employees_with_experience(df, years)
    print(f"Employees with at least {years} years of experience:")
    print(experienced_employees[['FirstName', 'LastName']])

"""Task 3: Functions and Modules"""

#get_department_statistics

def get_department_statistics(df):
    # Initialize the dictionary to store the results
    department_stats = {}

    # Ensure the 'DateofHire' column is in datetime format
    df['DateofHire'] = pd.to_datetime(df['DateofHire'])

    # Iterate over each department
    for department in df['Department'].unique():
        dept_df = df[df['Department'] == department]

        # Calculate the average salary for the department
        avg_salary = dept_df['Salary'].mean()

        # Calculate the average number of years since the date of hire for the department
        today = datetime.today()
        avg_years_since_hire = dept_df['DateofHire'].apply(lambda x: today.year - x.year).mean()

        # Add the statistics to the dictionary
        department_stats[department] = {
            'Average Salary': avg_salary,
            'Average Age': avg_years_since_hire
        }

    return department_stats

# Load the DataFrame from a CSV file
csv_file_path = '/content/drive/MyDrive/Python/employees1.csv'
df = pd.read_csv(csv_file_path)

# Call the function and print the result
department_statistics = get_department_statistics(df)
print(department_statistics)

"""Task 4: Data Visualization with Matplotlib

"""

#plot_salary_distribution

import matplotlib.pyplot as plt

def plot_salary_distribution(df):

    # Check if 'Salary' column exists in the DataFrame
    if 'Salary' not in df.columns:
        raise ValueError("DataFrame does not contain a 'Salary' column.")

    # Plot histogram
    plt.figure(figsize=(12, 6))
    plt.hist(df['Salary'], bins=20, color='orange', edgecolor='black')
    plt.xlabel('Salary')
    plt.ylabel('Frequency')
    plt.title('Salary Distribution')
    plt.grid(axis='y', alpha=0.75)
    plt.show()
    plt.savefig('/content/drive/MyDrive/Python/project')



df = pd.read_csv('/content/drive/MyDrive/Python/employees1.csv')
plot_salary_distribution(df)

#average_salary_by_department

def plot_average_salary_by_department(df, save_path=None):
    # Check if 'Department' and 'Salary' columns exist in the DataFrame
    if 'Department' not in df.columns or 'Salary' not in df.columns:
        raise ValueError("DataFrame does not contain 'Department' and/or 'Salary' columns.")

    # Calculate average salary by department
    avg_salary_by_department = df.groupby('Department')['Salary'].mean().sort_values()

    # Plot bar chart
    plt.figure(figsize=(12, 6))
    avg_salary_by_department.plot(kind='bar', color='orange', edgecolor='black')
    plt.xlabel('Department')
    plt.ylabel('Average Salary')
    plt.title('Average Salary by Department')
    plt.grid(axis='y', alpha=0.75)
    plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for better readability
    plt.show()
    plt.savefig('/content/drive/MyDrive/Python/project')

# Example usage
# Load your DataFrame from a CSV file
df = pd.read_csv('/content/drive/MyDrive/Python/employees1.csv')
plot_average_salary_by_department(df, save_path='average_salary_by_department.png')

#plot_salary_vs_experience

pip install seaborn

import seaborn as sns

def plot_salary_vs_experience(df, save_path=None):

    # Check if 'Salary' and 'DateofHire' columns exist in the DataFrame
    if 'Salary' not in df.columns or 'DateofHire' not in df.columns:
        raise ValueError("DataFrame does not contain 'Salary' and/or 'DateofHire' columns.")

    # Convert 'DateofHire' to years of experience (assuming current date is 2024-06-14)
    df['DateofHire'] = pd.to_datetime(df['DateofHire'])
    df['Experience'] = 2024 - df['DateofHire'].dt.year

    # Plot scatter plot
    plt.figure(figsize=(12, 6))
    sns.scatterplot(data=df, x='Experience',hue='Experience', y='Salary')
    plt.xlabel('Experience')
    plt.ylabel('Salary')
    plt.title('Salary vs. Experience')
    plt.show()
    plt.savefig('/content/drive/MyDrive/Python/project')

# Example usage
# Load your DataFrame from a CSV file
df = pd.read_csv('/content/drive/MyDrive/Python/employees1.csv')
plot_salary_vs_experience(df, save_path='salary_vs_experience.png')

#plot_age_distribution_by_department

!pip install kaleido

!pip install -U kaleido

import plotly.express as px
import plotly.io as pio

def plot_age_distribution_by_department(df):

    # Check if 'Department' and 'DateofHire' columns exist in the DataFrame
    if 'Department' not in df.columns or 'DateofHire' not in df.columns:
        raise ValueError("DataFrame does not contain 'Department' and/or 'DateofHire' columns.")

    # Calculate age based on 'DateofHire' (assuming current date is 2024-06-14)
    df['DateofHire'] = pd.to_datetime(df['DateofHire'])
    df['Age'] = 2024 - df['DateofHire'].dt.year

    # Create box plot with Plotly
    fig = px.box(df, x='Department', y='Age', title='Age Distribution by Department', points='all')

    # Show the plot
    fig.show()

    # Save the plot as an image
    pio.write_image(fig, 'age_distribution_by_department.png')

# Example usage
# Load your DataFrame from a CSV file
df = pd.read_csv('/content/drive/MyDrive/Python/employees1.csv')
plot_age_distribution_by_department(df)